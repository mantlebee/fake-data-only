import { Any, Dictionary, KeyOf, List } from "@mantlebee/ts-core";

import { Dataset, Row } from "./types";

/**
 * Represents the column of a table ({@link ITable}).
 * Its purpose is to generate a value for the row generated by the table.
 * @typeParam TRow - Type of the row.
 * @typeParam TValue - Type of the column's value.
 */
export interface IColumn<TRow extends Row, TValue = Any> {
  /**
   * Column's name. It must be unique for a {@link ITable}.
   */
  readonly name: KeyOf<TRow>;
  /**
   * Generates a value. The returned value is applied to the row.
   * @param row Row to update. The row has the values of the previous columns already processed.
   */
  getValue(row: TRow): TValue;
}

/**
 * Represents a database with its own tables ({@link ITable}) and relations {@link Relation}.
 * Its purpose is to generate the database dataset.
 * The {@link Dataset} object is a dictionary, where the keys are the tables names and the values are objects with the table instance and its generated rows.
 */
export interface IDatabase {
  /**
   * List of relations between tables that must be processed after the tables rows are generated.
   */
  readonly relations?: List<IRelation<Any, Any>>;
  /**
   * List of tables that must be used to generate rows.
   */
  readonly tables: List<ITable<Any>>;
  /**
   * Generates the database dataset, it is a dictionary, where the keys are the tables names and the values are objects with the table instance and its generated rows.
   * @param countsMap Dictionary with the tables counts, used to generate a specific amount of rows for each table. It is a dictionary where the keys are the tables names and the values the row counts to generate.
   */
  getDataset(countsMap: Dictionary<number>): Dataset;
}

/**
 * Represents a relation between two tables ({@link ITable}).
 * Its purpose is to update table rows according to another table rows values.
 * @typeParam TSourceRow - Type of the row of the source table.
 * @typeParam TTargetRow - Type of the row of the target table.
 */
export interface IRelation<TSourceRow extends Row, TTargetRow extends Row> {
  readonly sourceTable: ITable<TSourceRow>;
  readonly targetTable: ITable<TTargetRow>;
  /**
   * Update source table rows using a target table rows or the entire dataset.
   * @param sourceRows List of rows to update of the source table.
   * @param targetRows List of rows of the target table.
   * @param dataset The entire database dataset.
   */
  setValues(
    sourceRows: List<TSourceRow>,
    targetRows: List<TTargetRow>,
    dataset: Dataset
  ): void;
}

/**
 * Represents a table.
 * Its purpose is to generate rows.
 * @typeParam TRow - Type of the row.
 */
export interface ITable<TRow extends Row> {
  /**
   * The table's columns used to generate values for the rows.
   */
  readonly columns: List<IColumn<TRow>>;
  /**
   * Table's name.
   */
  readonly name: string;
  /**
   * Generates a specific amount of rows.
   * @param count Number of rows to generate.
   */
  getRows(count: number): List<TRow>;
}
