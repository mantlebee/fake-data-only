import { Any, Dictionary, KeyOf, List } from "@mantlebee/ts-core";

import { ColumnOptions, Data, Relation, Row } from "./types";

/**
 * Represents the column of a table ({@link ITable}).
 * Its purpose is to generate a value for the row generated by the table.
 * @typeParam TRow - Type of the row.
 * @typeParam TValue - Type of the column's value.
 * @typeParam TOptions - Type of the column's options. It must extend the {@link ColumnOptions} type.
 */
export interface IColumn<
  TRow extends Row,
  TValue = Any,
  TOptions extends ColumnOptions = ColumnOptions,
> {
  /**
   * Column's name. It must be unique for a {@link ITable}.
   */
  readonly name: KeyOf<TRow>;
  /**
   * Column's options. Each column implementation can extend it to improve the value generation.
   */
  readonly options: TOptions;
  /**
   * Generates a value. The returned value is applied to the row.
   * @param row Row to update. The row already has the values of the previous columns already processed.
   */
  getValue(row: TRow): TValue;
}

/**
 * Represents a column related to another table ({@link ITable}).
 * Its purpose is double:
 *  1. When table rows are generated, the {@link getValue} method returns a default type-consistent value for the row.
 *  2. When relations are processed by the database ({@link IDatabase}), the {@link setValues} method updates the table's rows values.
 * @typeParam TSourceRow - Type of the row of current table (like the TRow type of {@link IColumn}).
 * @typeParam TTargetRow - Type of the row of the target table.
 */
export interface IColumnRelation<
  TSourceRow extends Row,
  TTargetRow extends Row,
  TValue = Any,
  TOptions extends ColumnOptions = ColumnOptions,
> extends IColumn<TSourceRow, TValue, TOptions> {
  setValues(
    sourceRows: List<TSourceRow>,
    targetRows: List<TTargetRow>,
    data: Data,
  ): void;
}

/**
 * Represents a database with its own tables ({@link ITable}) and relations {@link Relation}.
 * Its purpose is to generate a dictionary of data, where the key is the table name and the value is the table rows generated.
 */
export interface IDatabase {
  readonly relations?: List<Relation<Any, Any>>;
  readonly tables: List<ITable<Any>>;
  getData(rowsNumberMap: Dictionary<number>): Data;
}

/**
 * Represents a table.
 * Its purpose is to generate rows.
 * @typeParam TRow - Type of the row.
 */
export interface ITable<TRow extends Row> {
  /**
   * The table's columns used to generate values for the rows.
   */
  readonly columns: List<IColumn<TRow>>;
  /**
   * Table's name.
   */
  readonly name: string;
  /**
   * Generates a specific amount of rows.
   * @param count Number of rows to generate.
   */
  getRows(count: number): List<TRow>;
}
