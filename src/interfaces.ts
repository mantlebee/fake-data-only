import { Any, KeyOf, List } from "@mantlebee/ts-core";

import { RowsCountsMap, Dataset, TableKey } from "./types";

/**
 * Represents the column of a table ({@link ITable}).
 * Its purpose is to generate a value for the row generated by the table.
 * @typeParam TRow - Type of the row.
 * @typeParam TValue - Type of the column's value.
 */
export interface IColumn<TRow, TValue = Any> {
  /**
   * Column's name. It must be unique for a {@link ITable}.
   */
  readonly name: KeyOf<TRow>;
  /**
   * Generates a value. The returned value is applied to the row.
   * @param row Row to update. The row has the values of the previous columns already processed.
   */
  getValue(row: TRow): TValue;
}

/**
 * Represents the column of a table ({@link ITable}), used to generate data based on values of rows from a different table.
 * Its purpose is to generate a default value for the row generated by the table, and to update it when target table's rows are generated.
 * @typeParam TRow - Type of the row.
 * @typeParam TTargetRow - Type of the row of the related table.
 * @typeParam TValue - Type of the column's value.
 */
export interface IColumnRelation<TRow, TTargetRow, TValue = Any>
  extends IColumn<TRow, TValue> {
  /**
   * Update source table rows using a target table rows or the entire dataset.
   * @param sourceRows List of rows to update of the source table.
   * @param targetRows List of rows of the target table.
   * @param dataset The entire database dataset.
   */
  setValues(
    sourceRows: List<TRow>,
    targetRows: List<TTargetRow>,
    dataset: Dataset
  ): void;
}

/**
 * Represents a database with its own tables ({@link ITable}).
 * Its purpose is to generate the table's rows, if needed, and to convert the result into a JSON or a more human-readable.
 * The {@link Dataset} object is a dictionary, where the keys are the tables' keys and the values are the generated rows.
 */
export interface IDatabase {
  getTable<TRow>(tableKey: TableKey<TRow>): ITable<TRow>;
  seed(rowsCountMap: RowsCountsMap): IDatabase;
  toJSON(): Dataset;
}

/**
 * Represents a table.
 * Its purpose is to generate rows.
 * @typeParam TRow - Type of the row.
 */
export interface ITable<TRow> {
  /**
   * Return the table's columns used to generate values for the rows.
   */
  getColumns(): List<IColumn<TRow>>;
  /**
   * Return the table's key.
   */
  getKey(): TableKey<TRow>;
  /**
   * Returns the tables rows.
   * Returns an empty list, if {@link seed} hasn't be called, first.
   */
  getRows(): List<TRow>;
  /**
   * Generates a specific amount of rows.
   * @param rowsCount Number of rows to generate.
   * @returns the table instance. Useful to concatenate operations.
   */
  seed(rowsCount: number): ITable<TRow>;
}
